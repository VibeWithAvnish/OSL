#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int *cal_need(int n,int r,int need[][r], int allocated[][r], int max[][r]) {
    // Calculate resource need for each process
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < r; j++) {
            need[i][j] = max[i][j] - allocated[i][j];
        }
    }
    return need;
}
void printmat(int n,int r,int mat[][r]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < r; j++) {
            printf("%d\t", mat[i][j]);
        }
        printf("\n");
    }
}
void printarr(int r,int mat[]) {

    for (int j = 0; j < r; j++) {
        printf("%d\t", mat[j]);
    }
    printf("\n"); 
}
int *checksafeseq(int n,int r,int need[][r],int allocated[][r],int available[]){

    int finished[n]; // Array to track processes that have finished (1-finished/0-not finished)

    for (int f = 0; f < n; f++) {
        finished[f] = 0; // Initialize all processes as not finished
    }

    int seq[n];  // Array to store the safe sequence
    int indx = 0;

    for (int p = 0; p < n; p++) { // Loop for each process
        for (int i = 0; i < n; i++) {
            if (finished[i] == 0) {
                int flag = 0; // Flag to check if process is safe
                for (int j = 0; j < r; j++) {
                    if (need[i][j] > available[j]) {
                        flag = 1; // Process is not safe (need > available)
                        break;
                    }
                }
                if (flag == 0) {
                    seq[indx] = i; // Add process to safe sequence
                    indx++;
                    // Update available resources
                    for (int t = 0; t < r; t++) {
                        available[t] += allocated[i][t];
                    }
                    finished[i] = 1; // Mark process as finished
                }
            }
        }
    }

    int flag2 = 1;

    // Check if all processes are finished (system is safe)
    for (int i = 0; i < n; i++) {
        if (finished[i] == 0) {
            flag2 = 0;
            printf("\nThe system is not safe!!\n");
            break;
        }
    }
    // Print the safe sequence if the system is safe
    if (flag2 == 1) {
        printf("\nThe Process safe Sequence is: \n");
        for (int p = 0; p < n; p++) {
            printf("P%d -> ", seq[p] + 1); // Add 1 to process index to convert from 0-based to 1-based index
        }
        printf("End\n");
    }


    
}
int main() {

    int n, r;
    printf("enter the no.of processes:");
    scanf("%d", &n);
    printf("enter the no.of resources:");
    scanf("%d", &r);

    int need[n][r];     // Matrix to store the resource need of each process
    int total[r];       // Total resources available

    int max[n][r]; // Maximum resources required by each process

    int allocated[n][r]; // Resources allocated to each process

    int available[r]; // Available resources

    // Input maximum resources required by each process
    printf("Enter the Maximum Resources (nxr matrix):\n");
    for (int i = 0; i < n; i++) {

        printf("for process %d:", i + 1);
        printf("\n");
        for (int j = 0; j < r; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input resources allocated to each process
    printf("Enter the Resources Allocated (nxr matrix):\n");
    for (int i = 0; i < n; i++) {

        printf("for process %d:", i + 1);
        printf("\n");
        for (int j = 0; j < r; j++) {
            scanf("%d", &allocated[i][j]);
        }
    }

    // Input available resources
    printf("Enter the Available Resources (r elements):\n");
    for (int i = 0; i < r; i++) {

        scanf("%d", &available[i]);
    }
    
    printf("\nthe need matrix:\n");
    // Calculate resource need for each process
    cal_need(n,r,need, allocated, max);
    printmat(n,r,need);

    printf("Total Resources:\n");

    int col_sum[r];

    for (int j = 0; j < r; j++) {
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = sum + allocated[i][j];
        }
        col_sum[j] = sum;
    }

    for (int k = 0; k < r; k++) {
        total[k] = available[k] + col_sum[k];
        printf("%d\t", total[k]);
    }

    printf("\n");

    printf("The Available Resources: \n");
   
    printarr(r,available);

    checksafeseq(n,r,need,allocated,available);
    
    int newreq[r];
    int p_no;
    printf("\nenter for which process you want to request: ");
    scanf("%d", &p_no);
    printf("request:\n");
    for (int i = 0; i < r; i++) {

        scanf("%d", &newreq[i]);
    }
    // updating the need and allocated and available matrix

    for (int j = 0; j < r; j++) {

        if (newreq[j] <= need[p_no][j] && newreq[j] <= available[j]) {

            available[j] -= newreq[j];
            allocated[p_no][j] += newreq[j];
            need[p_no][j] -= newreq[j];
        }
    }
    // updated need matrix:
    printf("The updated need matrix: \n");
    printmat(n,r,need);
    // updated available matrix:
    printf("The updated Available Resources: \n");
    printarr(r,available);

    checksafeseq(n,r,need,allocated,available);
    

    return 0;
}
//*********************************************OUTPUT***********************************************************

enter the no.of processes:5
enter the no.of resources:4
Enter the Maximum Resources (nxr matrix):
for process 1:
0 0 1 2 
for process 2:
2 7 5 0
for process 3:
6 6 5 6
for process 4:
4 3 5 6
for process 5:
0 6 5 2
Enter the Resources Allocated (nxr matrix):
for process 1:
0 0 1 2
for process 2:
2 0 0 0
for process 3:
0 0 3 4
for process 4:
2 3 5 4
for process 5:
0 3 3 2
Enter the Available Resources (r elements):
2 1 0 0

the need matrix:
0       0       0       0
0       7       5       0
6       6       2       2
2       0       0       2
0       3       2       0
Total Resources:
6       7       12      12
The Available Resources:
2       1       0       0

The Process safe Sequence is:
P1 -> P4 -> P5 -> P2 -> P3 -> End

enter for which process you want to request: 2
request:
1 0 0 1
The updated need matrix:
0       0       0       0
0       7       5       0
5       6       2       1
2       0       0       2
0       3       2       0
The updated Available Resources:
5       7       12      11

The Process safe Sequence is:
P1 -> P2 -> P3 -> P4 -> P5 -> End



