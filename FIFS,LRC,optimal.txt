#include <stdio.h>

#define MAX_FRAMES 3
#define MAX_PAGES 10

int frames[MAX_FRAMES];
int pageQueue[MAX_FRAMES];
int pageQueueIndex = 0;

int pageFaults = 0; // Variable to count page faults

void initializeFrames() {
    for (int i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1; // Initialize frames with -1 indicating empty
        pageQueue[i] = -1; // Initialize page queue with -1
    }
}

void displayFrames() {
    for (int i = 0; i < MAX_FRAMES; i++) {
        if (frames[i] == -1) {
            printf("- ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}

int isPageInFrames(int page) {
    for (int i = 0; i < MAX_FRAMES; i++) {
        if (frames[i] == page) {
            return 1; // Page found in frames
        }
    }
    return 0; // Page not found in frames
}

int findEmptyFrame() {
    for (int i = 0; i < MAX_FRAMES; i++) {
        if (frames[i] == -1) {
            return i; // Return the index of an empty frame
        }
    }
    return -1; // No empty frame found
}

int findLRUFrame() {
    return pageQueue[0]; // LRU frame is the first page in the queue
}

int findOptimalFrame(int page, int referenceString[], int currentIndex) {
    int farthestIndex = -1;
    int maxDistance = -1;

    for (int i = 0; i < MAX_FRAMES; i++) {
        int j;
        for (j = currentIndex; j < MAX_PAGES; j++) {
            if (frames[i] == referenceString[j]) {
                if (j > maxDistance) {
                    maxDistance = j;
                    farthestIndex = i;
                }
                break;
            }
        }
        if (j == MAX_PAGES) {
            return i; // Page not referenced again, so it's the best choice
        }
    }

    return farthestIndex;
}

void FCFS(int referenceString[]) {
    initializeFrames();
    pageFaults = 0;

    printf("FCFS Page Replacement Algorithm:\n");
    for (int i = 0; i < MAX_PAGES; i++) {
        if (!isPageInFrames(referenceString[i])) {
            int emptyFrameIndex = findEmptyFrame();
            if (emptyFrameIndex != -1) {
                frames[emptyFrameIndex] = referenceString[i];
            } else {
                frames[0] = referenceString[i];
            }
            pageFaults++;
        }

        displayFrames();
    }
    printf("Total Page Faults: %d\n", pageFaults);
}

void LRU(int referenceString[]) {
    initializeFrames();
    pageFaults = 0;

    printf("\nLRU Page Replacement Algorithm:\n");
    for (int i = 0; i < MAX_PAGES; i++) {
        if (!isPageInFrames(referenceString[i])) {
            int emptyFrameIndex = findEmptyFrame();
            if (emptyFrameIndex != -1) {
                frames[emptyFrameIndex] = referenceString[i];
            } else {
                int lruFrame = findLRUFrame();
                for (int j = 0; j < MAX_FRAMES; j++) {
                    if (pageQueue[j] == lruFrame) {
                        frames[j] = referenceString[i];
                        break;
                    }
                }
            }
            pageFaults++;
        }

        // Update the page queue
        pageQueue[pageQueueIndex] = referenceString[i];
        pageQueueIndex++;

        displayFrames();
    }
    printf("Total Page Faults: %d\n", pageFaults);
}

void Optimal(int referenceString[]) {
    initializeFrames();
    pageFaults = 0;

    printf("\nOptimal Page Replacement Algorithm:\n");
    for (int i = 0; i < MAX_PAGES; i++) {
        if (!isPageInFrames(referenceString[i])) {
            int emptyFrameIndex = findEmptyFrame();
            if (emptyFrameIndex != -1) {
                frames[emptyFrameIndex] = referenceString[i];
            } else {
                int optimalFrame = findOptimalFrame(referenceString[i], referenceString, i + 1);
                frames[optimalFrame] = referenceString[i];
            }
            pageFaults++;
        }

        displayFrames();
    }
    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int referenceString[MAX_PAGES] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3};
    FCFS(referenceString);
    LRU(referenceString);
    Optimal(referenceString);

    return 0;
}